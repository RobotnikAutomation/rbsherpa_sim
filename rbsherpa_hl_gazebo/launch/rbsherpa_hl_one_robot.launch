<?xml version="1.0"?>
<launch>

	<arg name="id_robot" default="rbsherpa_hl"/>
	<arg name="model" value="$(env ROBOT_MODEL)" />
	<arg name="x_init_pose" default="0"/>
	<arg name="y_init_pose" default="0"/>
	<arg name="z_init_pose" default="0"/>
	<arg name="xacro_robot" default="rbsherpa_hl_std.urdf.xacro"/>
	<arg name="launch_robot_localization" default="false"/>
	<arg name="launch_amcl_and_mapserver" default="false"/>
	<arg name="launch_gmapping" default="false"/>
	<arg name="launch_move_base" default="false"/>
	<arg name="map_file" default="empty/empty.yaml"/>
	<arg name="robot_localization_mode" default="odom"/>
	<!-- odom, complete (including gps)-->
	<arg name="ros_planar_move_plugin" default="false"/>
	<arg name="hq_model" default="false"/>
	<arg name="sim" default="false"/>

	<!-- BEGIN ROBOT-->
	<rosparam file="$(find rbsherpa_hl_control)/config/gazebo/gazebo_controller_$(arg model).yaml" command="load"/>
	<group ns="$(arg id_robot)">

		<arg name="prefix" value="$(arg id_robot)_"/>
		<arg name="hq" value="$(arg hq_model)"/>

		<group ns="base">
			<!-- Load the URDF into the ROS Parameter Server -->
			<param name="robot_description" command="$(find xacro)/xacro '$(find rbsherpa_hl_description)/robots/$(arg xacro_robot)' prefix:=$(arg prefix) hq:=$(arg hq) sim:=$(arg sim) ros_planar_move_plugin:=$(arg ros_planar_move_plugin) --inorder"/>

			<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
				<remap from="/joint_states" to="joint_states" />
			</node>
			<!-- Spawner model into gazebo -->
			<node name="urdf_spawner_rbsherpa_hl_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-x $(arg x_init_pose) -y $(arg y_init_pose) -z $(arg z_init_pose) -urdf -param robot_description -model $(arg id_robot)" />

			<include file="$(find rbsherpa_hl_control)/launch/rbsherpa_hl_control_$(arg model)_sim.launch">
				<arg name="sim" value="$(arg sim)"/>
			</include>

			<!-- pad -->
			<include file="$(find rbsherpa_hl_pad)/launch/rbsherpa_hl_pad.launch"/>
		</group>

		<!-- robot_localization nodes, publishes transformation world->odom->base_footprint -->
		<include if="$(arg launch_robot_localization)" file="$(find rbsherpa_hl_localization)/launch/robot_localization_$(arg robot_localization_mode).launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- use static_transform_publisher to define map->odom transform    -->
		<!-- only use if you arenÂ´t using a localization algorithm like amcl -->
		<!--node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="static_map_broadcaster" args="0 0 0 0 0 0 map $(arg namespace)odom 100" /-->

		<!-- amcl and map server base-->
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find rbsherpa_hl_localization)/launch/map_server.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="map_file" value="$(arg map_file)"/>
		</include>
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find rbsherpa_hl_localization)/launch/amcl.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="x_init_pose" value="$(arg x_init_pose)"/>
			<arg name="y_init_pose" value="$(arg y_init_pose)"/>
			<arg name="z_init_pose" value="$(arg z_init_pose)"/>
			<arg name="scan_topic" value="/$(arg id_robot)/base/front_laser/scan"/>
		</include>

		<!-- move base -->
		<include if="$(arg launch_move_base)" file="$(find rbsherpa_hl_navigation)/launch/move_base.launch">
			<arg name="prefix" value="$(arg id_robot)"/>
			<arg name="model" value="$(arg model)"/>
			<arg name="odom_topic" value="/$(arg id_robot)/base/odom"/>
			<arg name="scan_topic" value="/$(arg id_robot)/base/front_laser/scan"/>
		</include>


		<!-- gmapping -->
		<include if="$(arg launch_gmapping)" file="$(find rbsherpa_hl_localization)/launch/slam_gmapping.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

	</group>

</launch>
