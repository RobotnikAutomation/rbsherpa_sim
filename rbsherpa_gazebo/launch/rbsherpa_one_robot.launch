<?xml version="1.0"?>
<launch>

	<arg name="robot_id" default="robot"/>
	<arg name="kinematics" default="omni" />
	<arg name="twist2ackermann" default="false"/>
	<arg name="x_init_pose" default="0"/>
	<arg name="y_init_pose" default="0"/>
	<arg name="z_init_pose" default="0"/>
	<arg name="xacro_robot" default="rbsherpa_std.urdf.xacro"/>
	<arg name="launch_robot_localization" default="false"/>
	<arg name="launch_amcl_and_mapserver" default="false"/>
	<arg name="launch_gmapping" default="false"/>
	<arg name="launch_move_base" default="false"/>
	<arg name="launch_move" default="false"/>
	<arg name="map_file" default="$(find rbsherpa_localization)/maps/empty/map_empty.yaml"/>
	<arg name="global_frame" default="$(arg prefix)map"/>
	<arg name="prefix" default="$(arg robot_id)_"/>
	<arg name="launch_base_hw_sim" default="false"/>
	<arg name="launch_arm" default="false"/>

	<!-- BEGIN ROBOT-->
	<rosparam file="$(find rbsherpa_control)/config/gazebo/gazebo_controller_$(arg kinematics).yaml" command="load"/>

	<group ns="$(arg robot_id)">

		<!--group ns="base"-->

		<!-- Load the URDF into the ROS Parameter Server -->
		<param name="robot_description" command="$(find xacro)/xacro '$(find rbsherpa_description)/robots/$(arg xacro_robot)' prefix:=$(arg prefix) --inorder"/>

		<!-- Spawner model into gazebo -->
		<node name="urdf_spawner_rbsherpa_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-x $(arg x_init_pose) -y $(arg y_init_pose) -z $(arg z_init_pose) -urdf -param robot_description -model $(arg robot_id)" />

		<!-- Robot state publisher -->
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
			<remap from="/joint_states" to="joint_states" />
		</node>

		<!-- start rbsherpa_control nodes -->
		<include file="$(find rbsherpa_control)/launch/rbsherpa_control.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="kinematics" value="$(arg kinematics)"/>
			<arg name="robot_id" value="$(arg robot_id)"/>
			<arg name="sim" value="true"/>
		</include>

		<!-- start twist2ackermann node -->
		<include if="$(arg twist2ackermann)" file="$(find robotnik_twist2ackermann)/launch/twist2ackermann.launch">
			<arg name="from_topic" value="robotnik_base_control/cmd_vel"/>
			<arg name="to_topic" value="robotnik_base_control/cmd_ack"/>
		</include>

		<!-- robot_localization nodes, publishes transformation world->odom->base_footprint -->
		<include if="$(arg launch_robot_localization)" file="$(find rbsherpa_localization)/launch/robot_localization_$(arg kinematics).launch">
			<!--arg name="prefix" value="$(arg prefix)"/-->
		</include>

		<!-- pad -->
		<include file="$(find rbsherpa_pad)/launch/rbsherpa_pad.launch">
			<arg name="kinematics" value="$(arg kinematics)"/>
		</include>

		<group if="$(arg launch_arm)">
			<rosparam file="$(find rbsherpa_gazebo)/config/arm_control.yaml" command="load"/>
			<arg name="joint_names" default="[$(arg robot_id)_arm_shoulder_pan_joint, $(arg robot_id)_arm_shoulder_lift_joint, $(arg robot_id)_arm_elbow_joint, $(arg robot_id)_arm_wrist_1_joint, $(arg robot_id)_arm_wrist_2_joint, $(arg robot_id)_arm_wrist_3_joint] "/>
			<rosparam param="arm_controller/joints" subst_value="True"> $(arg joint_names)</rosparam>

			<node if="$(arg launch_arm)" name="controller_spawner_arm" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
                        arm_controller"/>
		</group>


		<!-- use static_transform_publisher to define map->odom transform    -->
		<!-- only use if you arenÂ´t using a localization algorithm like amcl -->
		<!--node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="static_map_broadcaster" args="0 0 0 0 0 0 map $(arg namespace)odom 100" /-->

		<!-- amcl and map server base-->
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find rbsherpa_localization)/launch/map_server.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="map_file" value="$(arg map_file)"/>
			<arg name="frame_id" value="$(arg global_frame)"/>
		</include>

		<include if="$(arg launch_amcl_and_mapserver)" file="$(find rbsherpa_localization)/launch/amcl.launch">
			<arg name="global_frame" value="$(arg global_frame)"/>
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="x_init_pose" value="$(arg x_init_pose)"/>
			<arg name="y_init_pose" value="$(arg y_init_pose)"/>
			<arg name="z_init_pose" value="$(arg z_init_pose)"/>
			<!--arg name="scan_topic" value="/$(arg robot_id)/front_laser/scan"/-->
		</include>

		<!-- move base -->
		<include if="$(arg launch_move_base)" file="$(find rbsherpa_navigation)/launch/move_base.launch">
			<arg name="robot_id" value="$(arg robot_id)"/>
			<arg name="kinematics" value="$(arg kinematics)"/>
		</include>

		<!-- gmapping -->
		<include if="$(arg launch_gmapping)" file="$(find rbsherpa_localization)/launch/gmapping.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- base_hw_sim -->
		<include if="$(arg launch_base_hw_sim)" file="$(find robotnik_base_hw_sim)/launch/rb1_hw_sim.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- move  -->
		<include if="$(arg launch_move)" file="$(find rbsherpa_navigation)/launch/move.launch">
			<arg name="robot_id" value="$(arg robot_id)"/>
		</include>

	</group>

</launch>
